apiVersion: demo.example.com/v1alpha1
kind: Nginx
metadata:
  name: nginx-sample
spec:
  # Default values copied from <project_dir>/helm-charts/nginx/values.yaml
  affinity: {}
  args: []
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  cloneStaticSiteFromGit:
    branch: ""
    enabled: false
    extraEnvVars: []
    extraVolumeMounts: []
    gitClone:
      args: []
      command: []
    gitSync:
      args: []
      command: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/git
      tag: 2.33.0-debian-10-r76
    interval: 60
    repository: ""
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    http: 8080
    https: ""
  containerSecurityContext:
    enabled: false
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  existingServerBlockConfigmap: ""
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
  healthIngress:
    annotations: {}
    enabled: false
    extraHosts: []
    extraTls: []
    hostname: example.local
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  hostAliases: []
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.21.4-debian-10-r0
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    hostname: nginx.local
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  initContainers: []
  kubeVersion: ""
  ldapDaemon:
    customLivenessProbe: {}
    customReadinessProbe: {}
    enabled: false
    existingNginxServerBlockSecret: ""
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/nginx-ldap-auth-daemon
      tag: 0.20200116.0-debian-10-r500
    ldapConfig:
      baseDN: ""
      bindDN: ""
      bindPassword: ""
      filter: ""
      httpCookieName: ""
      httpRealm: ""
      uri: ""
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nginxServerBlock: |-
      server {
      listen 0.0.0.0:{{ .Values.containerPorts.http }};
  
      # You can provide a special subPath or the root
      location = / {
          auth_request /auth-proxy;
      }
  
      location = /auth-proxy {
          internal;
  
          proxy_pass http://127.0.0.1:{{ .Values.ldapDaemon.port }};
  
          ###############################################################
          # YOU SHOULD CHANGE THE FOLLOWING TO YOUR LDAP CONFIGURATION  #
          ###############################################################
  
          # URL and port for connecting to the LDAP server
          # proxy_set_header X-Ldap-URL "ldap://YOUR_LDAP_SERVER_IP:YOUR_LDAP_SERVER_PORT";
  
          # Base DN
          # proxy_set_header X-Ldap-BaseDN "dc=example,dc=org";
  
          # Bind DN
          # proxy_set_header X-Ldap-BindDN "cn=admin,dc=example,dc=org";
  
          # Bind password
          # proxy_set_header X-Ldap-BindPass "adminpassword";
      }
      }
    port: 8888
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/nginx-exporter
      tag: 0.9.0-debian-10-r207
    podAnnotations: {}
    port: ""
    resources:
      limits: {}
      requests: {}
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9113
    serviceMonitor:
      enabled: false
      interval: ""
      namespace: ""
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: 0
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: false
    fsGroup: 1001
    sysctls: []
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  serverBlock: ""
  service:
    annotations: {}
    externalTrafficPolicy: Cluster
    httpsPort: 443
    loadBalancerIP: ""
    nodePorts:
      http: ""
      https: ""
    port: 80
    targetPort:
      http: http
      https: https
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    autoMount: false
    create: false
    name: ""
  sidecarSingleProcessNamespace: false
  sidecars: []
  staticSiteConfigmap: ""
  staticSitePVC: ""
  tolerations: {}
  
  
